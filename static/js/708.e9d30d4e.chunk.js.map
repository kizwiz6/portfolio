{"version":3,"file":"static/js/708.e9d30d4e.chunk.js","mappings":"6JAIA,MAkGA,EAlGqBA,IAAwB,IAAvB,OAAEC,EAAM,MAAEC,GAAOF,EACrC,MAAOG,EAAUC,IAAeC,EAAAA,EAAAA,UAAS,OAClCC,EAAmBC,IAAwBF,EAAAA,EAAAA,UAAS,IACpDG,EAAWC,IAAgBJ,EAAAA,EAAAA,WAAS,GAErCK,EAAgBA,KACpBN,EAAY,MACZG,EAAqB,EAAE,EAGnBI,EAAiBC,IACH,eAAdA,EAAMC,IAERN,GAAsBO,IAAeA,EAAY,GAAKb,EAAOc,SACtC,cAAdH,EAAMC,IAEfN,GAAsBO,IAAeA,EAAY,EAAIb,EAAOc,QAAUd,EAAOc,SACtD,WAAdH,EAAMC,KAEfH,GACF,EAoBF,OAjBAM,EAAAA,EAAAA,YAAU,KAEJb,GACFc,SAASC,iBAAiB,UAAWP,GAEhC,KACLM,SAASE,oBAAoB,UAAWR,EAAc,IAEvD,CAACR,KAGJa,EAAAA,EAAAA,YAAU,KACJb,GAAkC,OAAtBG,GACdF,EAAYH,EAAOK,GACrB,GACC,CAACA,EAAmBL,EAAQE,KAG7BiB,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACED,EAAAA,EAAAA,MAAA,MAAIE,UAAU,mBAAkBD,SAAA,CAAEnB,EAAM,gBACxCqB,EAAAA,EAAAA,KAAA,OAAKD,UAAU,sEAAqED,SACjFpB,EAAOuB,KAAI,CAACC,EAAOC,KAClBN,EAAAA,EAAAA,MAAA,OAAiBE,UAAU,iBAAgBD,SAAA,EACzCE,EAAAA,EAAAA,KAAA,OACEI,IAAKF,EACLG,IAAK,GAAG1B,WAAewB,EAAQ,IAC/BJ,UAAU,gDACVO,QAASA,KACPzB,EAAYqB,GACZlB,EAAqBmB,EAAM,EAE7BI,OAAQA,IAAMrB,GAAa,GAC3BsB,QAASA,IAAMtB,GAAa,KAE7BD,IAAae,EAAAA,EAAAA,KAAA,OAAKD,UAAU,2EAA0ED,UAACE,EAAAA,EAAAA,KAAA,QAAAF,SAAM,mBAZtGI,OAiBbtB,IACCiB,EAAAA,EAAAA,MAAA,OACEE,UAAU,6EACVO,QAASnB,EAAcW,SAAA,EAEvBE,EAAAA,EAAAA,KAAA,UACEM,QAASnB,EACT,aAAW,iBACXY,UAAU,uDAAsDD,SACjE,UAGDE,EAAAA,EAAAA,KAAA,OACEI,IAAKxB,EACLyB,IAAK,oBAAoB1B,IACzBoB,UAAU,gDAEZC,EAAAA,EAAAA,KAAA,OAAKD,UAAU,wFACVO,QAASA,IAAMtB,GAAsBD,EAAoB,EAAIL,EAAOc,QAAUd,EAAOc,QAAQM,SAAC,aAGnGE,EAAAA,EAAAA,KAAA,OAAKD,UAAU,yFACVO,QAASA,IAAMtB,GAAsBD,EAAoB,GAAKL,EAAOc,QAAQM,SAAC,iBAKnF,C","sources":["components/ImageGallery.js"],"sourcesContent":["// components/ImageGallery.js\r\nimport React, { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst ImageGallery = ({ images, title }) => {\r\n  const [lightbox, setLightbox] = useState(null);\r\n  const [currentImageIndex, setCurrentImageIndex] = useState(0); // To track the current image index\r\n  const [isLoading, setIsLoading] = useState(true); // Track image loading state\r\n\r\n  const closeLightbox = () => {\r\n    setLightbox(null);\r\n    setCurrentImageIndex(0); // Reset the index when closing\r\n  };\r\n\r\n  const handleKeyDown = (event) => {\r\n    if (event.key === 'ArrowRight') {\r\n      // Move to the next image\r\n      setCurrentImageIndex((prevIndex) => (prevIndex + 1) % images.length);\r\n    } else if (event.key === 'ArrowLeft') {\r\n      // Move to the previous image\r\n      setCurrentImageIndex((prevIndex) => (prevIndex - 1 + images.length) % images.length);\r\n    } else if (event.key === 'Escape') {\r\n      // Close the lightbox\r\n      closeLightbox();\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Add keydown event listener when lightbox is open\r\n    if (lightbox) {\r\n      document.addEventListener('keydown', handleKeyDown);\r\n    }\r\n    return () => {\r\n      document.removeEventListener('keydown', handleKeyDown);\r\n    };\r\n  }, [lightbox]);\r\n\r\n  // Update the lightbox to show the current image\r\n  useEffect(() => {\r\n    if (lightbox && currentImageIndex !== null) {\r\n      setLightbox(images[currentImageIndex]);\r\n    }\r\n  }, [currentImageIndex, images, lightbox]);\r\n\r\n  return (\r\n    <div>\r\n      <h4 className=\"font-medium mb-2\">{title} Gallery:</h4>\r\n      <div className=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\r\n        {images.map((image, index) => (\r\n          <div key={image} className=\"cursor-pointer\">\r\n            <img\r\n              src={image}\r\n              alt={`${title} image ${index + 1}`} // Dynamic alt text\r\n              className=\"rounded-lg shadow-md w-full h-40 object-cover\"\r\n              onClick={() => {\r\n                setLightbox(image);\r\n                setCurrentImageIndex(index); // Set the current index when opening the lightbox\r\n              }}\r\n              onLoad={() => setIsLoading(false)} // Set loading state to false when image loads\r\n              onError={() => setIsLoading(false)} // Ensure loading state is reset on error\r\n            />\r\n            {isLoading && <div className=\"absolute inset-0 flex items-center justify-center bg-white bg-opacity-75\"><span>Loading...</span></div>}\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n      {lightbox && (\r\n        <div\r\n          className=\"fixed inset-0 flex justify-center items-center bg-black bg-opacity-75 z-50\"\r\n          onClick={closeLightbox}\r\n        >\r\n          <button\r\n            onClick={closeLightbox}\r\n            aria-label=\"Close lightbox\"\r\n            className=\"absolute top-4 right-4 text-white text-2xl font-bold\"\r\n          >\r\n            &times;\r\n          </button>\r\n          <img\r\n            src={lightbox}\r\n            alt={`Enlarged view of ${title}`} // Dynamic alt text\r\n            className=\"rounded-lg shadow-lg max-w-full max-h-full\"\r\n          />\r\n          <div className=\"absolute top-1/2 left-4 transform -translate-y-1/2 text-white text-2xl cursor-pointer\" \r\n               onClick={() => setCurrentImageIndex((currentImageIndex - 1 + images.length) % images.length)}>\r\n            &#9664; {/* Left Arrow */}\r\n          </div>\r\n          <div className=\"absolute top-1/2 right-4 transform -translate-y-1/2 text-white text-2xl cursor-pointer\" \r\n               onClick={() => setCurrentImageIndex((currentImageIndex + 1) % images.length)}>\r\n            &#9654; {/* Right Arrow */}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nImageGallery.propTypes = {\r\n  images: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n  title: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default ImageGallery;\r\n"],"names":["_ref","images","title","lightbox","setLightbox","useState","currentImageIndex","setCurrentImageIndex","isLoading","setIsLoading","closeLightbox","handleKeyDown","event","key","prevIndex","length","useEffect","document","addEventListener","removeEventListener","_jsxs","children","className","_jsx","map","image","index","src","alt","onClick","onLoad","onError"],"sourceRoot":""}